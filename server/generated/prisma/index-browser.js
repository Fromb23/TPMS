
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  fullName: 'fullName',
  email: 'email',
  role: 'role',
  password: 'password',
  isActive: 'isActive',
  isVerified: 'isVerified',
  isBlocked: 'isBlocked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LecturerScalarFieldEnum = {
  id: 'id',
  department: 'department',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  zoneId: 'zoneId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TpApplicationScalarFieldEnum = {
  id: 'id',
  schoolName: 'schoolName',
  position: 'position',
  startDate: 'startDate',
  endDate: 'endDate',
  studentId: 'studentId',
  schoolId: 'schoolId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LecturerZoneAssignedScalarFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId',
  zoneId: 'zoneId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LecturerZoneRequestScalarFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId',
  zoneId: 'zoneId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupervisionScheduleScalarFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonPlanScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupervisionVisitScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  date: 'date',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  title: 'title',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinalDocumentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  title: 'title',
  content: 'content',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  score: 'score',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  username: 'username',
  fullName: 'fullName',
  email: 'email',
  password: 'password'
};

exports.Prisma.StudentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.LecturerOrderByRelevanceFieldEnum = {
  id: 'id',
  department: 'department',
  userId: 'userId'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.ZoneOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SchoolOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  zoneId: 'zoneId'
};

exports.Prisma.TpApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  schoolName: 'schoolName',
  position: 'position',
  studentId: 'studentId',
  schoolId: 'schoolId'
};

exports.Prisma.LecturerZoneAssignedOrderByRelevanceFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId',
  zoneId: 'zoneId'
};

exports.Prisma.LecturerZoneRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId',
  zoneId: 'zoneId'
};

exports.Prisma.SupervisionScheduleOrderByRelevanceFieldEnum = {
  id: 'id',
  lecturerId: 'lecturerId'
};

exports.Prisma.LessonPlanOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  title: 'title',
  description: 'description'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.SupervisionVisitOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  notes: 'notes'
};

exports.Prisma.AlertOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message'
};

exports.Prisma.ReportOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  content: 'content'
};

exports.Prisma.FinalDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  title: 'title',
  content: 'content',
  fileUrl: 'fileUrl'
};

exports.Prisma.GradeOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lecturerId: 'lecturerId',
  feedback: 'feedback'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  LECTURER: 'LECTURER',
  ADMIN: 'ADMIN'
};

exports.Status = exports.$Enums.Status = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.AlertType = exports.$Enums.AlertType = {
  GENERAL: 'GENERAL',
  WARNING: 'WARNING',
  INFO: 'INFO'
};

exports.Prisma.ModelName = {
  User: 'User',
  Student: 'Student',
  Lecturer: 'Lecturer',
  Admin: 'Admin',
  Zone: 'Zone',
  School: 'School',
  TpApplication: 'TpApplication',
  LecturerZoneAssigned: 'LecturerZoneAssigned',
  LecturerZoneRequest: 'LecturerZoneRequest',
  SupervisionSchedule: 'SupervisionSchedule',
  LessonPlan: 'LessonPlan',
  SupervisionVisit: 'SupervisionVisit',
  Alert: 'Alert',
  Report: 'Report',
  FinalDocument: 'FinalDocument',
  Grade: 'Grade'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
